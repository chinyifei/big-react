(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

	//当前环境是否支持symbol
	const supportSymbol = typeof Symbol === 'function' && typeof Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'chin',
	    };
	    return element;
	};
	const jsx = (type, config, ...maybeChildren) => {
	    let key = null;
	    let ref = null;
	    const props = {};
	    for (key in config) {
	        const val = config[key];
	        if (val !== undefined) {
	            if (val === 'key') {
	                key = '' + val;
	            }
	            continue;
	        }
	        if (val !== undefined) {
	            if (val === 'ref') {
	                ref = val;
	            }
	            continue;
	        }
	        if ({}.hasOwnProperty.call(config, key)) {
	            props[key] = val;
	        }
	        const maybeChildrenLength = maybeChildren.length;
	        if (maybeChildrenLength === 1) {
	            props.children = maybeChildren[0];
	        }
	        else {
	            props.children = maybeChildren;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	var index = {
	    version: '0.0.0',
	    createElement: jsx,
	};

	return index;

}));
